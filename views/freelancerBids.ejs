<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>FreelancerBids</title>
  <link href="/css/bootstrap.min.css" rel="stylesheet" />
  <link href="/home/css/style.css" rel="stylesheet" />
  <!-- <link href="/css/style.min.css" rel="stylesheet" /> -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/material-design-iconic-font@2.2.0/dist/css/material-design-iconic-font.min.css" rel="stylesheet" />
  <!-- <link href="/css/style.css" rel="stylesheet" /> -->
  <link href="/my-css/style.css" rel="stylesheet" />

  <link rel="stylesheet" href="/freelancer-nav-css/style.css">

  <style>
    /* Force badge colors to apply on this page */
    .badge.bg-warning { background-color: #ffc107 !important; color: #212529 !important; }
    .badge.bg-success { background-color: #198754 !important; color: #fff !important; }
    .badge.bg-danger { background-color: #dc3545 !important; color: #fff !important; }
    .badge.bg-primary { background-color: #0d6efd !important; color: #fff !important; }
    .badge.bg-info { background-color: #0dcaf0 !important; color: #212529 !important; }
    .badge.bg-secondary { background-color: #6c757d !important; color: #fff !important; }

    
  </style>
</head>
<body>
   <!-- navber here -->
   <%-include("./layouts/FreelancerDashboardNavber") %>

  <div style="margin-top: 100px;" class="container main-content">
    <div class="card container-fluid">
      <div class="card-header">
        <h5>My Bids</h5>
      </div>
      <div class="card-body">
        <% if (bids.length === 0) { %>
          <div class="text-center text-muted fs-6">You have not placed any bids yet.</div>
        <% } else { %>
          <table class="table">
            <thead>
              <tr>
                <th>Job</th>
                <th>Amount ($)</th>
                <th>Status</th>
                <th>Submitted</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% bids.forEach(bid => { %>
                <tr>
                  <td><a href="/freelancer/jobs/<%= bid.job._id %>"><%= bid.job.title %></a></td>
                  <td><%= bid.bidAmount %></td>
                  <td>
                    <% 
                      const normalized = (bid.status || '').toLowerCase().trim();
                      let badgeClass = 'bg-secondary';
                      switch (normalized) {
                        case 'pending': badgeClass = 'bg-warning text-dark'; break;
                        case 'accepted': badgeClass = 'bg-success'; break;
                        case 'rejected':
                        case 'declined':
                        case 'cancelled':
                        case 'canceled': badgeClass = 'bg-danger'; break;
                        case 'withdrawn': badgeClass = 'bg-secondary'; break;
                        case 'shortlisted': badgeClass = 'bg-info text-dark'; break;
                        case 'hired':
                        case 'in-progress': badgeClass = 'bg-primary'; break;
                        default: badgeClass = 'bg-secondary';
                      }
                      const statusLabel = normalized ? normalized.charAt(0).toUpperCase() + normalized.slice(1) : 'Unknown';
                    %>
                    <span class="badge <%= badgeClass %>"><%= statusLabel %></span>
                  </td>
                  <td><%= bid.createdAt.toDateString() %></td>
                  <td>
                    <% if (bid.status === 'pending') { %>
                      <form action="/bids/<%= bid._id %>/withdraw" method="POST">
                        <button class="btn btn-sm btn-outline-danger">Withdraw</button>
                      </form>
                    <% } %>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
        <% } %>
      </div>
    </div>
  </div>

  <div class="main-content">
  <div class="container-fluid">
      <%-include("./layouts/footer") %>
  </div>

   <script>
      document.addEventListener('DOMContentLoaded', function() {
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('mainContent');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const mobileToggle = document.getElementById('mobileToggle');
        const toggleIcon = sidebarToggle.querySelector('i');

        // Desktop sidebar toggle
        sidebarToggle.addEventListener('click', function() {
          sidebar.classList.toggle('collapsed');
          mainContent.classList.toggle('expanded');
          
          if (sidebar.classList.contains('collapsed')) {
            toggleIcon.className = 'fas fa-chevron-right';
          } else {
            toggleIcon.className = 'fas fa-chevron-left';
          }
        });

        // Mobile sidebar toggle
        mobileToggle.addEventListener('click', function() {
          sidebar.classList.toggle('show');
        });

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', function(event) {
          if (window.innerWidth <= 768) {
            const isClickInsideSidebar = sidebar.contains(event.target);
            const isClickOnMobileToggle = mobileToggle.contains(event.target);
            
            if (!isClickInsideSidebar && !isClickOnMobileToggle) {
              sidebar.classList.remove('show');
            }
          }
        });

        // Handle window resize
        window.addEventListener('resize', function() {
          if (window.innerWidth > 768) {
            sidebar.classList.remove('show');
          }
        });

        // Add active class to current nav item
        const currentPath = window.location.pathname;
        const navLinks = document.querySelectorAll('.nav-link');
        
        navLinks.forEach(link => {
          if (link.getAttribute('href') === currentPath) {
            link.classList.add('active');
          } else {
            link.classList.remove('active');
          }
        });

        // Smooth hover effects
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => {
          item.addEventListener('mouseenter', function() {
            this.style.transform = 'translateX(5px)';
          });
          
          item.addEventListener('mouseleave', function() {
            this.style.transform = 'translateX(0)';
          });
        });

        // Top Navbar Dropdown Functionality
        const notificationsBtn = document.getElementById('notificationsBtn');
        const messagesBtn = document.getElementById('messagesBtn');
        const userMenuBtn = document.getElementById('userMenuBtn');
        const notificationsDropdown = document.getElementById('notificationsDropdown');
        const messagesDropdown = document.getElementById('messagesDropdown');
        const userDropdown = document.getElementById('userDropdown');

        // Notifications dropdown
        notificationsBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          notificationsDropdown.classList.toggle('show');
          messagesDropdown.classList.remove('show');
          userDropdown.classList.remove('show');
        });

        // Messages dropdown
        messagesBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          messagesDropdown.classList.toggle('show');
          notificationsDropdown.classList.remove('show');
          userDropdown.classList.remove('show');
        });

        // User menu dropdown
        userMenuBtn.addEventListener('click', function(e) {
          e.stopPropagation();
          userDropdown.classList.toggle('show');
          notificationsDropdown.classList.remove('show');
          messagesDropdown.classList.remove('show');
        });

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
          if (!notificationsBtn.contains(event.target) && !notificationsDropdown.contains(event.target)) {
            notificationsDropdown.classList.remove('show');
          }
          if (!messagesBtn.contains(event.target) && !messagesDropdown.contains(event.target)) {
            messagesDropdown.classList.remove('show');
          }
          if (!userMenuBtn.contains(event.target) && !userDropdown.contains(event.target)) {
            userDropdown.classList.remove('show');
          }
        });

        // Search functionality
        const searchInput = document.querySelector('.search-input');
        const searchBtn = document.querySelector('.search-btn');

        searchBtn.addEventListener('click', function() {
          const searchTerm = searchInput.value.trim();
          if (searchTerm) {
            // Redirect to search page or perform search
            window.location.href = `/freelancer/jobs?search=${encodeURIComponent(searchTerm)}`;
          }
        });

        searchInput.addEventListener('keypress', function(e) {
          if (e.key === 'Enter') {
            searchBtn.click();
          }
        });

        // Mark all notifications as read
        const markAllReadBtn = document.querySelector('.mark-all-read');
        if (markAllReadBtn) {
          markAllReadBtn.addEventListener('click', function(e) {
            e.preventDefault();
            const unreadItems = document.querySelectorAll('.notification-item.unread');
            unreadItems.forEach(item => {
              item.classList.remove('unread');
            });
            
            // Update notification badge
            const notificationBadge = notificationsBtn.querySelector('.notification-badge');
            if (notificationBadge) {
              notificationBadge.textContent = '0';
              notificationBadge.style.display = 'none';
            }
          });
        }

        // Add hover effects to dropdown items
        const dropdownItems = document.querySelectorAll('.dropdown-item');
        dropdownItems.forEach(item => {
          item.addEventListener('mouseenter', function() {
            this.style.transform = 'translateX(5px)';
          });
          
          item.addEventListener('mouseleave', function() {
            this.style.transform = 'translateX(0)';
          });
        });

        // Add smooth animations to notification items
        const notificationItems = document.querySelectorAll('.notification-item, .message-item');
        notificationItems.forEach((item, index) => {
          item.style.animationDelay = `${index * 0.1}s`;
          item.classList.add('fade-in');
        });
      });
    </script>

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <!-- Site scripts (absolute paths) -->
  <script src="/home/js/main.js"></script>
  <script src="/my-js/script.js"></script>
</body>
</html>
